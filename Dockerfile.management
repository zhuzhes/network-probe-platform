# Multi-stage build for management platform
FROM node:18-alpine AS frontend-builder

# Set working directory for frontend build
WORKDIR /app/frontend

# Copy frontend package files
COPY management_platform/web/package*.json ./
RUN npm ci --only=production

# Copy frontend source code
COPY management_platform/web/ ./

# Build frontend
RUN npm run build

# Python backend stage
FROM python:3.11-alpine AS backend-builder

# Install system dependencies for building Python packages
RUN apk add --no-cache \
    gcc \
    musl-dev \
    postgresql-dev \
    libffi-dev \
    openssl-dev \
    cargo \
    rust

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Final runtime stage
FROM python:3.11-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    libpq \
    libffi \
    openssl \
    && addgroup -g 1001 -S appgroup \
    && adduser -u 1001 -S appuser -G appgroup

# Copy Python packages from builder
COPY --from=backend-builder /root/.local /home/appuser/.local

# Copy built frontend from frontend-builder
COPY --from=frontend-builder /app/frontend/dist /app/static

# Set working directory
WORKDIR /app

# Copy application code
COPY management_platform/ ./management_platform/
COPY shared/ ./shared/
COPY alembic.ini ./
COPY migrations/ ./migrations/

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads \
    && chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV PATH="/home/appuser/.local/bin:$PATH"
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

# Default command
CMD ["uvicorn", "management_platform.api.main:app", "--host", "0.0.0.0", "--port", "8000"]