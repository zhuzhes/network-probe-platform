version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: network-probe-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-network_probe}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - network-probe-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-network_probe}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: network-probe-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - network-probe-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: network-probe-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-network_probe}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    networks:
      - network-probe-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Management Platform
  management:
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        COMPONENT: management
    container_name: network-probe-management
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-network_probe}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # RabbitMQ
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin123}@rabbitmq:5672/${RABBITMQ_VHOST:-network_probe}
      
      # Application
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      DEBUG: ${DEBUG:-false}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-jwt-secret-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-30}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_TLS: ${SMTP_TLS:-true}
      
      # File uploads
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-10485760}
      
    volumes:
      - management_uploads:/app/uploads
      - management_logs:/app/logs
      - ../certs:/app/certs:ro
    ports:
      - "${MANAGEMENT_PORT:-8000}:8000"
    networks:
      - network-probe-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Agent (example - can be scaled)
  agent:
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        COMPONENT: agent
    environment:
      # Management platform connection
      MANAGEMENT_URL: ${MANAGEMENT_URL:-wss://management:8000/ws}
      AGENT_ID: ${AGENT_ID:-agent-001}
      AGENT_NAME: ${AGENT_NAME:-Docker Agent 001}
      
      # Security
      AGENT_TOKEN: ${AGENT_TOKEN:-agent-token-change-in-production}
      TLS_VERIFY: ${TLS_VERIFY:-false}
      
      # Agent configuration
      HEARTBEAT_INTERVAL: ${HEARTBEAT_INTERVAL:-30}
      MAX_CONCURRENT_TASKS: ${MAX_CONCURRENT_TASKS:-10}
      RESOURCE_REPORT_INTERVAL: ${RESOURCE_REPORT_INTERVAL:-60}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - agent_logs:/app/logs
      - agent_data:/app/data
      - ../certs:/app/certs:ro
    networks:
      - network-probe-net
    depends_on:
      management:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: ${AGENT_REPLICAS:-1}

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: network-probe-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ../certs:/etc/nginx/certs:ro
      - management_uploads:/var/www/uploads:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - network-probe-net
    depends_on:
      - management
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  management_uploads:
    driver: local
  management_logs:
    driver: local
  agent_logs:
    driver: local
  agent_data:
    driver: local

networks:
  network-probe-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16